{"/home/travis/build/npmtest/node-npmtest-angular-google-chart/test.js":"/* istanbul instrument in package npmtest_angular_google_chart */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular-google-chart/lib.npmtest_angular_google_chart.js":"/* istanbul instrument in package npmtest_angular_google_chart */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_angular_google_chart = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_angular_google_chart = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-angular-google-chart/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-angular-google-chart && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_angular_google_chart */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_angular_google_chart\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_angular_google_chart.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_angular_google_chart.rollup.js'] =\n            local.assetsDict['/assets.npmtest_angular_google_chart.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_angular_google_chart.__dirname + '/lib.npmtest_angular_google_chart.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/ng-google-chart.js":"/*! angular-google-chart 2015-11-29 */\n/*\n* @description Google Chart Api Directive Module for AngularJS\n* @version 0.1.0\n* @author GitHub Contributors <https://github.com/angular-google-chart/angular-google-chart/graphs/contributors> \n* @license MIT\n* @year 2013\n*/\n/* global angular */\n(function(){\n    angular.module('googlechart', [])\n        .run(registerResizeEvent);\n        \n    registerResizeEvent.$inject = ['$rootScope', '$window'];\n    \n    function registerResizeEvent($rootScope, $window){\n        angular.element($window).bind('resize', function () {\n                $rootScope.$emit('resizeMsg');\n            });\n    }\n})();\n/* global angular, google */\n(function(){\n    angular.module('googlechart')\n        .factory('FormatManager', formatManagerFactory);\n        \n        function formatManagerFactory(){\n            // Handles the processing of Google Charts API Formats\n            function FormatManager($google){\n                var self = this;\n                var oldFormatTemplates = {};\n                self.iFormats = {}; // Holds instances of formats (ie. self.iFormats.date[0] = new $google.visualization.DateFormat(params))\n                self.applyFormats = applyFormats;\n                \n                // apply formats of type to datatable\n                function apply(tFormats, dataTable){\n                    var i, formatType;\n                    for (formatType in tFormats){\n                        if (tFormats.hasOwnProperty(formatType)){\n                            for (i = 0; i < self.iFormats[formatType].length; i++) {\n                                if (tFormats[formatType][i].columnNum < dataTable.getNumberOfColumns()) {\n                                    self.iFormats[formatType][i].format(dataTable, tFormats[formatType][i].columnNum);\n                                }\n                            }\n                        }\n                    }\n                }\n                \n                function applyFormat(formatType, FormatClass, tFormats){\n                    var i;\n                    if (angular.isArray(tFormats[formatType])) {\n                        // basic change detection; no need to run if no changes\n                        if (!angular.equals(tFormats[formatType], oldFormatTemplates[formatType])) {\n                            oldFormatTemplates[formatType] = tFormats[formatType];\n                            self.iFormats[formatType] = [];\n            \n                            if (formatType === 'color') {\n                                instantiateColorFormatters(tFormats);\n                            } else {\n                                for (i = 0; i < tFormats[formatType].length; i++) {\n                                    self.iFormats[formatType].push(new FormatClass(\n                                        tFormats[formatType][i])\n                                    );\n                                }\n                            }\n                        }\n                    }\n                }\n                \n                function applyFormats(dataTable, tFormats, customFormatters) {\n                    var formatType, FormatClass, requiresHtml = false;\n                    if (!angular.isDefined(tFormats) || !angular.isDefined(dataTable)){\n                        return { requiresHtml: false };\n                    }\n                    for (formatType in tFormats){\n                        if (tFormats.hasOwnProperty(formatType)){\n                            FormatClass = getFormatClass(formatType, customFormatters);\n                            if (!angular.isFunction(FormatClass)){\n                                // if no class constructor was returned,\n                                // there's no point in completing cycle\n                                continue;\n                            }\n                            applyFormat(formatType, FormatClass, tFormats);\n                            \n                            //Many formatters require HTML tags to display special formatting\n                            if (formatType === 'arrow' || formatType === 'bar' || formatType === 'color') {\n                                requiresHtml = true;\n                            }\n                        }\n                    }\n                    apply(tFormats, dataTable);\n                    return { requiresHtml: requiresHtml };\n                }\n                \n                function instantiateColorFormatters(tFormats){\n                    var t, colorFormat, i, data, formatType = 'color';\n                    for (t = 0; t < tFormats[formatType].length; t++) {\n                        colorFormat = new $google.visualization.ColorFormat();\n\n                        for (i = 0; i < tFormats[formatType][t].formats.length; i++) {\n                            data = tFormats[formatType][t].formats[i];\n\n                            if (typeof (data.fromBgColor) !== 'undefined' && typeof (data.toBgColor) !== 'undefined') {\n                                colorFormat.addGradientRange(data.from, data.to, data.color, data.fromBgColor, data.toBgColor);\n                            } else {\n                                colorFormat.addRange(data.from, data.to, data.color, data.bgcolor);\n                            }\n                        }\n\n                        self.iFormats[formatType].push(colorFormat);\n                    }\n                }\n                \n                function getFormatClass(formatType, customFormatters){\n                    var className = formatType.charAt(0).toUpperCase() + formatType.slice(1).toLowerCase() + \"Format\";\n                    if ($google.visualization.hasOwnProperty(className)){\n                        return google.visualization[className];\n                    } else if (angular.isDefined(customFormatters) && customFormatters.hasOwnProperty(formatType)) {\n                        return customFormatters[formatType];\n                    }\n                    return;\n                }\n            }\n            \n            return FormatManager;\n        }\n})();\n/* global angular, google */\n\n(function() {\n\n    angular.module('googlechart')\n        .controller('GoogleChartController', GoogleChartController);\n\n    GoogleChartController.$inject = ['$scope', '$element', '$attrs', '$injector', '$timeout', '$window', '$rootScope', 'GoogleChartService'];\n\n    function GoogleChartController($scope, $element, $attrs, $injector, $timeout, $window, $rootScope, GoogleChartService) {\n        var self = this;\n        var resizeHandler;\n        var googleChartService;\n\n        init();\n\n        function cleanup() {\n            resizeHandler();\n        }\n\n        function draw() {\n            if (!draw.triggered && (self.chart !== undefined)) {\n                draw.triggered = true;\n                $timeout(setupAndDraw, 0, true);\n            }\n            else if (self.chart !== undefined) {\n                $timeout.cancel(draw.recallTimeout);\n                draw.recallTimeout = $timeout(draw, 10);\n            }\n        }\n\n        // Watch function calls this.\n        function drawAsync() {\n            googleChartService.getReadyPromise()\n                .then(draw);\n        }\n\n        //setupAndDraw() calls this.\n        function drawChartWrapper() {\n            googleChartService.draw();\n            draw.triggered = false;\n        }\n\n        function init() {\n            // Instantiate service\n            googleChartService = new GoogleChartService();\n            \n            self.registerChartListener = googleChartService.registerChartListener;\n            self.registerWrapperListener = googleChartService.registerWrapperListener;\n            self.registerServiceListener = googleChartService.registerServiceListener;\n            \n            /* Watches, to refresh the chart when its data, formatters, options, view,\n            or type change. All other values intentionally disregarded to avoid double\n            calls to the draw function. Please avoid making changes to these objects\n            directly from this directive.*/\n            $scope.$watch(watchValue, watchHandler, true); // true is for deep object equality checking\n\n            // Redraw the chart if the window is resized\n            resizeHandler = $rootScope.$on('resizeMsg', drawAsync);\n\n            //Cleanup resize handler.\n            $scope.$on('$destroy', cleanup);\n        }\n\n        function setupAndDraw() {\n            googleChartService.setup($element,\n            self.chart.type,\n            self.chart.data,\n            self.chart.view,\n            self.chart.options,\n            self.chart.formatters,\n            self.chart.customFormatters);\n\n            $timeout(drawChartWrapper);\n        }\n\n        function watchHandler() {\n            self.chart = $scope.$eval($attrs.chart);\n            drawAsync();\n        }\n\n        function watchValue() {\n            var chartObject = $scope.$eval($attrs.chart);\n            if (angular.isDefined(chartObject) && angular.isObject(chartObject)) {\n                return {\n                    customFormatters: chartObject.customFormatters,\n                    data: chartObject.data,\n                    formatters: chartObject.formatters,\n                    options: chartObject.options,\n                    type: chartObject.type,\n                    view: chartObject.view\n                };\n            }\n        }\n    }\n})();\n/* global angular */\n(function(){\n    angular.module('googlechart')\n        .directive('agcBeforeDraw', onReadyDirective);\n        \n    function onReadyDirective(){\n        return {\n            restrict: 'A',\n            scope: false,\n            require: 'googleChart',\n            link: function(scope, element, attrs, googleChartController){\n                callback.$inject=['chartWrapper'];\n                function callback(chartWrapper){\n                    scope.$apply(function (){\n                        scope.$eval(attrs.agcBeforeDraw, {chartWrapper: chartWrapper});\n                    });\n                }\n                googleChartController.registerServiceListener('beforeDraw', callback, this);\n            }\n        };\n    }\n})();\n(function(){\n    angular.module('googlechart')\n        .directive('agcOnClick', onClickDirective);\n\n    function onClickDirective(){\n        return {\n            restrict: 'A',\n            scope: false,\n            require: 'googleChart',\n            link: function(scope, element, attrs, googleChartController){\n                callback.$inject = ['args', 'chart', 'chartWrapper'];\n                function callback(args, chart, chartWrapper){\n                    scope.$apply(function (){\n                        scope.$eval(attrs.agcOnClick, {args: args, chart: chart, chartWrapper: chartWrapper});\n                    });\n                }\n                googleChartController.registerChartListener('click', callback, this);\n            }\n        };\n    }\n})();\n\n/* global angular */\n(function(){\n    angular.module('googlechart')\n        .directive('agcOnError', onErrorDirective);\n    function onErrorDirective(){\n        return{\n            restrict: 'A',\n            scope: false,\n            require: 'googleChart',\n            link: function(scope, element, attrs, googleChartController){\n                callback.$inject = ['chartWrapper', 'chart', 'args'];\n                function callback(chartWrapper, chart, args){\n                    var returnValues = {\n                        chartWrapper: chartWrapper,\n                        chart: chart,\n                        args: args,\n                        error: args[0],\n                        err: args[0],\n                        id: args[0].id,\n                        message: args[0].message\n                    };\n                    scope.$apply(function(){\n                        scope.$eval(attrs.agcOnError, returnValues);\n                    });\n                }\n                googleChartController.registerWrapperListener('error', callback, this);\n            }\n        };\n    }\n})();\n/* global angular */\n\n(function(){\n    angular.module('googlechart')\n        .directive('agcOnMouseout', agcOnMouseoutDirective);\n    \n    function agcOnMouseoutDirective(){\n        return {\n            restrict: 'A',\n            scope: false,\n            require: 'googleChart',\n            link: function(scope, element, attrs, googleChartController){\n                callback.$inject = ['args', 'chart', 'chartWrapper'];\n                function callback(args, chart, chartWrapper){\n                    var returnParams = {\n                        chartWrapper: chartWrapper,\n                        chart: chart,\n                        args: args,\n                        column: args[0].column,\n                        row: args[0].row\n                    };\n                    scope.$apply(function () {\n                        scope.$eval(attrs.agcOnMouseout, returnParams);\n                    });\n                }\n                googleChartController.registerChartListener('onmouseout', callback, this);\n            }\n        };\n    }\n})();\n/* global angular */\n\n(function(){\n    angular.module('googlechart')\n        .directive('agcOnMouseover', agcOnMouseoverDirective);\n    \n    function agcOnMouseoverDirective(){\n        return {\n            restrict: 'A',\n            scope: false,\n            require: 'googleChart',\n            link: function(scope, element, attrs, googleChartController){\n                callback.$inject = ['args', 'chart', 'chartWrapper'];\n                function callback(args, chart, chartWrapper){\n                    var returnParams = {\n                        chartWrapper: chartWrapper,\n                        chart: chart,\n                        args: args,\n                        column: args[0].column,\n                        row: args[0].row\n                    };\n                    scope.$apply(function () {\n                        scope.$eval(attrs.agcOnMouseover, returnParams);\n                    });\n                }\n                googleChartController.registerChartListener('onmouseover', callback, this);\n            }\n        };\n    }\n})();\n/* global angular */\n(function(){\n    angular.module('googlechart')\n        .directive('agcOnReady', onReadyDirective);\n        \n    function onReadyDirective(){\n        return {\n            restrict: 'A',\n            scope: false,\n            require: 'googleChart',\n            link: function(scope, element, attrs, googleChartController){\n                callback.$inject=['chartWrapper'];\n                function callback(chartWrapper){\n                    scope.$apply(function (){\n                        scope.$eval(attrs.agcOnReady, {chartWrapper: chartWrapper});\n                    });\n                }\n                googleChartController.registerWrapperListener('ready', callback, this);\n            }\n        };\n    }\n})();\n/* global angular */\n(function(){\n    angular.module('googlechart')\n        .directive('agcOnSelect', onSelectDirective);\n        \n    function onSelectDirective(){\n        return {\n            restrict: 'A',\n            scope: false,\n            require: 'googleChart',\n            link: function(scope, element, attrs, googleChartController){\n                callback.$inject = ['chartWrapper', 'chart'];\n                function callback(chartWrapper, chart){\n                    var selectEventRetParams = { selectedItems: chart.getSelection() };\n                    // This is for backwards compatibility for people using 'selectedItem' that only wanted the first selection.\n                    selectEventRetParams.selectedItem = selectEventRetParams.selectedItems[0];\n                    selectEventRetParams.chartWrapper = chartWrapper;\n                    selectEventRetParams.chart = chart;\n                    scope.$apply(function () {\n                        scope.$eval(attrs.agcOnSelect, selectEventRetParams);\n                    });\n                }\n                googleChartController.registerWrapperListener('select', callback, this);\n            }\n        };\n    }\n})();\n/* global angular, google */\n/* jshint -W072 */\n(function(){\n    angular.module('googlechart')\n        .directive('googleChart', googleChartDirective);\n        \n    googleChartDirective.$inject = [];\n        \n    function googleChartDirective() {\n\n        return {\n            restrict: 'A',\n            scope: false,\n            controller: 'GoogleChartController'\n        };\n    }\n})();\n\n/* global angular */\n(function(){\n    angular.module('googlechart')\n        .value('googleChartApiConfig', {\n            version: '1',\n            optionalSettings: {\n                packages: ['corechart']\n            }\n        });\n})();\n/* global angular */\n(function(){\n    angular.module('googlechart')\n        .factory('googleChartApiPromise', googleChartApiPromiseFactory);\n        \n    googleChartApiPromiseFactory.$inject = ['$rootScope', '$q', 'googleChartApiConfig', 'googleJsapiUrl'];\n        \n    function googleChartApiPromiseFactory($rootScope, $q, apiConfig, googleJsapiUrl) {\n        apiConfig.optionalSettings = apiConfig.optionalSettings || {};\n        var apiReady = $q.defer();\n        var onLoad = function () {\n            // override callback function\n            var settings = {\n                callback: function () {\n                    var oldCb = apiConfig.optionalSettings.callback;\n                    $rootScope.$apply(function () {\n                        apiReady.resolve(google);\n                    });\n\n                    if (angular.isFunction(oldCb)) {\n                        oldCb.call(this);\n                    }\n                }\n            };\n\n            settings = angular.extend({}, apiConfig.optionalSettings, settings);\n\n            window.google.load('visualization', apiConfig.version, settings);\n        };\n        var head = document.getElementsByTagName('head')[0];\n        var script = document.createElement('script');\n\n        script.setAttribute('type', 'text/javascript');\n        script.src = googleJsapiUrl;\n\n        if (script.addEventListener) { // Standard browsers (including IE9+)\n            script.addEventListener('load', onLoad, false);\n        } else { // IE8 and below\n            script.onreadystatechange = function () {\n                if (script.readyState === 'loaded' || script.readyState === 'complete') {\n                    script.onreadystatechange = null;\n                    onLoad();\n                }\n            };\n        }\n        head.appendChild(script);\n\n        return apiReady.promise;\n    }\n})();\n/* global angular */\n(function() {\n    angular.module('googlechart')\n        .factory('GoogleChartService', GoogleChartServiceFactory);\n\n    GoogleChartServiceFactory.$inject = ['googleChartApiPromise', '$injector', '$q', 'FormatManager'];\n\n    function GoogleChartServiceFactory(googleChartApiPromise, $injector, $q, FormatManager) {\n        function GoogleChartService() {\n            var self = this;\n            self.draw = draw;\n            self.getChartWrapper = getChartWrapper;\n            self.getData = getData;\n            self.getElement = getElement;\n            self.getOption = getOption;\n            self.getOptions = getOptions;\n            self.getView = getView;\n            self.getReadyPromise = getReadyPromise;\n            self.isApiReady = isApiReady;\n            self.registerChartListener = registerChartListener;\n            self.registerServiceListener = registerServiceListener;\n            self.registerWrapperListener = registerWrapperListener;\n            self.setData = setData;\n            self.setElement = setElement;\n            self.setOption = setOption;\n            self.setOptions = setOptions;\n            self.setup = setup;\n            self.setView = setView;\n\n            var $google,\n                _apiPromise,\n                _apiReady,\n                _chartWrapper,\n                _element,\n                _chartType,\n                _data,\n                _view,\n                _options,\n                _formatters,\n                _innerVisualization,\n                _formatManager,\n                _needsUpdate = true,\n                _customFormatters,\n                _serviceDeferred,\n                serviceListeners = {},\n                wrapperListeners = {},\n                chartListeners = {};\n\n            _init();\n\n            function _activateServiceEvent(eventName) {\n                var i;\n                if (angular.isArray(serviceListeners[eventName])) {\n                    for (i = 0; i < serviceListeners[eventName].length; i++) {\n                        serviceListeners[eventName][i]();\n                    }\n                }\n            }\n\n            function _apiLoadFail(reason) {\n                // Not sure what to do if this does happen.\n                // Post your suggestions in the issues tracker at\n                // https://github.com/angular-google-chart/angular-google-chart/\n                return reason;\n            }\n\n            function _apiLoadSuccess(g) {\n                $google = g;\n                _apiReady = true;\n                _serviceDeferred.resolve();\n                return g;\n            }\n\n\n            function _continueSetup() {\n                if (!angular.isDefined(_chartWrapper)) {\n                    _chartWrapper = new $google.visualization.ChartWrapper({\n                        chartType: _chartType,\n                        dataTable: _data,\n                        view: _view,\n                        options: _options,\n                        containerId: _element[0]\n                    });\n                    _registerListenersWithGoogle(_chartWrapper, wrapperListeners);\n                }\n                else {\n                    _chartWrapper.setChartType(_chartType);\n                    _chartWrapper.setDataTable(_data);\n                    _chartWrapper.setView(_view);\n                    _chartWrapper.setOptions(_options);\n                }\n\n                if (!_formatManager) {\n                    _formatManager = new FormatManager($google);\n                }\n\n                if (_formatManager.applyFormats(_chartWrapper.getDataTable(),\n                        _formatters, _customFormatters).requiresHtml) {\n                    _chartWrapper.setOption('allowHtml', true);\n                }\n\n                _needsUpdate = false;\n            }\n\n            // Credit for this solution:\n            // http://stackoverflow.com/a/20125572/3771976\n            function _getSetDescendantProp(obj, desc, value) {\n                var arr = desc ? desc.split(\".\") : [];\n\n                while (arr.length && obj) {\n                    var comp = arr.shift();\n                    var match = new RegExp(\"(.+)\\\\[([0-9]*)\\\\]\").exec(comp);\n\n                    if (value) {\n                        if (obj[comp] === undefined) {\n                            obj[comp] = {};\n                        }\n\n                        if (arr.length === 0) {\n                            obj[comp] = value;\n                        }\n                    }\n\n                    obj = obj[comp];\n                }\n\n                return obj;\n            }\n\n            function _handleReady() {\n                // When the chartWrapper is ready, check to see if the inner chart\n                // has changed. If it has, re-register listeners onto that chart.\n                if (_innerVisualization !== _chartWrapper.getChart()) {\n                    _innerVisualization = _chartWrapper.getChart();\n                    _registerListenersWithGoogle(_innerVisualization, chartListeners);\n                }\n            }\n\n            function _init() {\n                _apiReady = false;\n                _serviceDeferred = $q.defer();\n                //keeps the resulting promise to chain on other actions\n                _apiPromise = googleChartApiPromise\n                    .then(_apiLoadSuccess)\n                    .catch(_apiLoadFail);\n\n                registerWrapperListener('ready', _handleReady, self);\n            }\n\n            function _registerListener(listenerCollection, eventName, listenerFn, listenerObject) {\n                // This is the function that will be invoked by the charts API.\n                // Passing the wrapper function allows the use of DI for\n                // for the called function.\n                var listenerWrapper = function() {\n                    var locals = {\n                        chartWrapper: _chartWrapper,\n                        chart: _chartWrapper.getChart(),\n                        args: arguments\n                    };\n                    $injector.invoke(listenerFn, listenerObject || this, locals);\n                };\n\n                if (angular.isDefined(listenerCollection) && angular.isObject(listenerCollection)) {\n                    if (!angular.isArray(listenerCollection[eventName])) {\n                        listenerCollection[eventName] = [];\n                    }\n                    listenerCollection[eventName].push(listenerWrapper);\n                    return function() {\n                        if (angular.isDefined(listenerWrapper.googleListenerHandle)) {\n                            $google.visualization.events.removeListener(listenerWrapper.googleListenerHandle);\n                        }\n                        var fnIndex = listenerCollection[eventName].indexOf(listenerWrapper);\n                        listenerCollection[eventName].splice(fnIndex, 1);\n                        if (listenerCollection[eventName].length === 0) {\n                            listenerCollection[eventName] = undefined;\n                        }\n                    };\n                }\n            }\n\n            function _registerListenersWithGoogle(eventSource, listenerCollection) {\n                for (var eventName in listenerCollection) {\n                    if (listenerCollection.hasOwnProperty(eventName) && angular.isArray(listenerCollection[eventName])) {\n                        for (var fnIterator = 0; fnIterator < listenerCollection[eventName].length; fnIterator++) {\n                            if (angular.isFunction(listenerCollection[eventName][fnIterator])) {\n                                listenerCollection[eventName][fnIterator].googleListenerHandle =\n                                    $google.visualization.events.addListener(eventSource, eventName, listenerCollection[eventName][fnIterator]);\n                            }\n                        }\n                    }\n                }\n            }\n\n            function _runDrawCycle() {\n                _activateServiceEvent('beforeDraw');\n                _chartWrapper.draw();\n            }\n\n            /*\n            This function does this:\n                - waits for API to load, if not already loaded\n                - sets up ChartWrapper object (create or update)\n                - schedules timeout event to draw chart\n            */\n            function draw() {\n                if (_needsUpdate) {\n                    _apiPromise = _apiPromise.then(_continueSetup);\n                }\n                _apiPromise = _apiPromise.then(_runDrawCycle());\n            }\n\n            function getChartWrapper() {\n                // Most get functions on this interface return copies,\n                // this one should return reference so as to expose the \n                //chart api to users\n                return _chartWrapper;\n            }\n\n            function getData() {\n                var data = _data || {};\n                return angular.copy(data);\n            }\n\n            function getElement() {\n                return _element;\n            }\n\n            function getOption(name) {\n                var options = _options || {};\n                return _getSetDescendantProp(options, name);\n            }\n\n            function getOptions() {\n                var options = _options || {};\n                return angular.copy(options);\n            }\n\n            function getReadyPromise() {\n                return _serviceDeferred.promise;\n            }\n\n            function getView() {\n                var view = _view || {};\n                return angular.copy(view);\n            }\n\n            function isApiReady() {\n                return _apiReady;\n            }\n\n            function registerChartListener(eventName, listenerFn, listenerObject) {\n                return _registerListener(chartListeners, eventName, listenerFn, listenerObject);\n            }\n\n            function registerServiceListener(eventName, listenerFn, listenerObject) {\n                return _registerListener(serviceListeners, eventName, listenerFn, listenerObject);\n            }\n\n            function registerWrapperListener(eventName, listenerFn, listenerObject) {\n                return _registerListener(wrapperListeners, eventName, listenerFn, listenerObject);\n            }\n\n            function setData(data) {\n                if (angular.isDefined(data)) {\n                    _data = angular.copy(data);\n                    _needsUpdate = true;\n                }\n            }\n\n            function setElement(element) {\n                if (angular.isElement(element) && _element !== element) {\n                    _element = element;\n                    // clear out the chartWrapper because we're going to need a new one\n                    _chartWrapper = null;\n                    _needsUpdate = true;\n                }\n            }\n\n            function setOption(name, value) {\n                _options = _options || {};\n                _getSetDescendantProp(_options, name, angular.copy(value));\n                _needsUpdate = true;\n            }\n\n            function setOptions(options) {\n                if (angular.isDefined(options)) {\n                    _options = angular.copy(options);\n                    _needsUpdate = true;\n                }\n            }\n\n            function setup(element, chartType, data, view, options, formatters, customFormatters) {\n                // Keep values if already set,\n                // can call setup() with nulls to keep\n                // existing values\n                _element = element || _element;\n                _chartType = chartType || _chartType;\n                _data = data || _data;\n                _view = view || _view;\n                _options = options || _options;\n                _formatters = formatters || _formatters;\n                _customFormatters = customFormatters || _customFormatters;\n\n                _apiPromise = _apiPromise.then(_continueSetup);\n            }\n\n            function setView(view) {\n                _view = angular.copy(view);\n            }\n        }\n        return GoogleChartService;\n    }\n})();\n/* global angular */\n(function(){\n    angular.module('googlechart')\n        .provider('googleJsapiUrl', googleJsapiUrlProvider);\n        \n    function googleJsapiUrlProvider() {\n        var protocol = 'https:';\n        var url = '//www.google.com/jsapi';\n        \n        this.setProtocol = function (newProtocol) {\n            protocol = newProtocol;\n        };\n\n        this.setUrl = function (newUrl) {\n            url = newUrl;\n        };\n\n        this.$get = function () {\n            return (protocol ? protocol : '') + url;\n        };\n    }\n})();","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/Gruntfile.js":"module.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    concat: {\n      build: {\n        options: {\n          banner: '/*! <%= pkg.name %> <%= grunt.template.today(\"yyyy-mm-dd\") %> */\\n' +\n            '/*\\n' +\n            '* @description Google Chart Api Directive Module for AngularJS\\n' +\n            '* @version <%= pkg.version %>\\n' +\n            '* @author GitHub Contributors <https://github.com/angular-google-chart/angular-google-chart/graphs/contributors> \\n' +\n            '* @license MIT\\n' +\n            '* @year 2013\\n' +\n            '*/\\n',\n          sourceMap: true\n        },\n        src: ['src/googlechart.module.js', 'src/*.js'],\n        dest: 'ng-google-chart.js'\n      },\n      release: {\n        options: {\n          banner: '/*! <%= pkg.name %> <%= grunt.template.today(\"yyyy-mm-dd\") %> */\\n' +\n            '/*\\n' +\n            '* @description Google Chart Api Directive Module for AngularJS\\n' +\n            '* @version <%= pkg.version %>\\n' +\n            '* @author GitHub Contributors <https://github.com/angular-google-chart/angular-google-chart/graphs/contributors> \\n' +\n            '* @license MIT\\n' +\n            '* @year 2013\\n' +\n            '*/\\n'\n        },\n        src: ['src/googlechart.module.js', 'src/*.js'],\n        dest: 'ng-google-chart.js'\n      }\n    },\n    jshint: {\n      options:{\n        jshintrc: true,\n        jasmine: true\n      },\n      all: ['Gruntfile.js', 'sample.js', 'partials/**/*.js', 'src/**/*.js']\n    },\n    uglify: {\n      build: {\n        options: {\n          sourceMapIn: 'ng-google-chart.js.map',\n          sourceMap: true\n        },\n        files: {\n          'ng-google-chart.min.js': ['ng-google-chart.js']\n        }\n      },\n      release: {\n        files: {\n          'ng-google-chart.min.js': ['ng-google-chart.js']\n        }\n      }\n    },\n    karma: {\n      unit: {\n        configFile: 'karma.conf.js',\n        singleRun: true\n      }\n    },\n    watch: {\n      files: ['src/**.js','test/**/*.spec.js'],\n      tasks:['jshint:all', 'karma:unit']\n    }\n  });\n\n  // Load the plugin that provides the \"uglify\" task.\n  grunt.loadNpmTasks('grunt-contrib-concat');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n  grunt.loadNpmTasks('grunt-karma');\n\n  // Default task(s).\n  grunt.registerTask('release', ['jshint:all', 'karma', 'concat:release', 'uglify:release']);\n  grunt.registerTask('build', ['jshint:all', 'karma', 'concat:build', 'uglify:build']);\n  grunt.registerTask('default', ['build']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/karma.conf.js":"module.exports = function (config) {\n    config.set({\n\n        // base path that will be used to resolve all patterns (eg. files, exclude)\n        basePath: '',\n\n\n        // frameworks to use\n        // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n        frameworks: ['jasmine', 'jasmine-matchers', 'sinon'],\n\n\n        // list of files / patterns to load in the browser\n        files: [\n          'node_modules/angular/angular.js',\n          'node_modules/angular-mocks/angular-mocks.js',\n          'node_modules/bardjs/dist/bard.js',\n          'src/googlechart.module.js',\n          'src/*.js',\n          'test/google.mock.js', //looking for a better way to handle mocks\n          'test/*.spec.js'\n        ],\n\n        // list of files to exclude\n        exclude: [\n        ],\n\n\n        // preprocess matching files before serving them to the browser\n        // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n        preprocessors: {\n            'src/**/*.js': ['coverage']\n        },\n\n\n        // test results reporter to use\n        // possible values: 'dots', 'progress'\n        // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n        reporters: ['dots', 'coverage'],\n        \n        coverageReporter:{type:'html', dir:'coverage/'},\n\n        // web server port\n        port: 9876,\n\n\n        // enable / disable colors in the output (reporters and logs)\n        colors: true,\n\n\n        // level of logging\n        // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n        logLevel: config.LOG_INFO,\n\n\n        // enable / disable watching file and executing tests whenever any file changes\n        autoWatch: true,\n\n\n        // start these browsers\n        // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n        browsers: ['PhantomJS'],\n\n        // Continuous Integration mode\n        // if true, Karma captures browsers, runs the tests and exits\n        singleRun: true\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/sample.js":"/* global angular */\n\nangular.module(\"google-chart-sample\", [\"ngRoute\", \"googlechart\"]).config(['$routeProvider',\n    function ($routeProvider) {\n        $routeProvider.\n            when('/fat', {\n                templateUrl: 'partials/fat.html',\n                controller: 'FatChartCtrl'\n            }).\n            when('/annotation', {\n                templateUrl: 'partials/annotation.html',\n                controller: 'AnnotationChartCtrl'\n            }).\n            when('/gauge', {\n                templateUrl: 'partials/gauge.html',\n                controller: 'GaugeChartCtrl'\n            }).\n            when('/generic/:chartType', {\n                templateUrl: 'partials/generic.html',\n                controller: 'GenericChartCtrl'\n            }).\n            otherwise({\n                redirectTo: '/fat'\n            });\n    }]).value('googleChartApiConfig', {\n            version: '1',\n            optionalSettings: {\n                packages: ['corechart', 'gauge'],\n                language: 'fr'\n            }\n    });\n","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/partials/annotation.js":"/* global angular */\n\nangular.module(\"google-chart-sample\").controller(\"AnnotationChartCtrl\", function ($scope) {\n    $scope.chartObject = {};\n\n    $scope.secondRow = [\n        {v: new Date(2314, 2, 16)},\n        {v: 13},\n        {v: 'Lalibertines'},\n        {v: 'They are very tall'},\n        {v: 25},\n        {v: 'Gallantors'},\n        {v: 'First Encounter'}\n    ];\n\n\n    $scope.chartObject.type = \"AnnotationChart\";\n\n    $scope.chartObject.data = {\"cols\": [\n        {id: \"month\", label: \"Month\", type: \"date\"},\n        {id: \"kepler-data\", label: \"Kepler-22b mission\", type: \"number\"},\n        {id: \"kepler-annot\", label: \"Kepler-22b Annotation Title\", type: \"string\"},\n        {id: \"kepler-annot-body\", label: \"Kepler-22b Annotation Text\", type: \"string\"},\n        {id: \"desktop-data\", label: \"Gliese mission\", type: \"number\"},\n        {id: \"desktop-annot\", label: \"Gliese Annotation Title\", type: \"string\"},\n        {id: \"desktop-annot-body\", label: \"Gliese Annotaioon Text\", type: \"string\"}\n    ], \"rows\": [\n        {c: [\n            {v: new Date(2314, 2, 15)},\n            {v: 19 },\n            {v: 'Lalibertines'},\n            {v: 'First encounter'},\n            {v: 7},\n            {v: undefined},\n            {v: undefined}\n        ]},\n        {c: $scope.secondRow},\n        {c: [\n            {v: new Date(2314, 2, 17)},\n            {v: 0},\n            {v: 'Lalibertines'},\n            {v: 'All crew lost'},\n            {v: 28},\n            {v: 'Gallantors'},\n            {v: 'Omniscience achieved'}\n\n        ]}\n    ]};\n\n    $scope.chartObject.options = {\n        displayAnnotations: true\n    };\n\n\n});","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/partials/fat.js":"/* global angular, $ */\n\n(function() {\n    'use strict';\n    angular.module('google-chart-sample').controller(\"FatChartCtrl\", function($scope) {\n\n        var chart1 = {};\n        chart1.type = \"AreaChart\";\n        chart1.displayed = false;\n        chart1.data = {\n            \"cols\": [{\n                id: \"month\",\n                label: \"Month\",\n                type: \"string\"\n            }, {\n                id: \"laptop-id\",\n                label: \"Laptop\",\n                type: \"number\"\n            }, {\n                id: \"desktop-id\",\n                label: \"Desktop\",\n                type: \"number\"\n            }, {\n                id: \"server-id\",\n                label: \"Server\",\n                type: \"number\"\n            }, {\n                id: \"cost-id\",\n                label: \"Shipping\",\n                type: \"number\"\n            }],\n            \"rows\": [{\n                c: [{\n                    v: \"January\"\n                }, {\n                    v: 19,\n                    f: \"42 items\"\n                }, {\n                    v: 12,\n                    f: \"Ony 12 items\"\n                }, {\n                    v: 7,\n                    f: \"7 servers\"\n                }, {\n                    v: 4\n                }]\n            }, {\n                c: [{\n                    v: \"February\"\n                }, {\n                    v: 13\n                }, {\n                    v: 1,\n                    f: \"1 unit (Out of stock this month)\"\n                }, {\n                    v: 12\n                }, {\n                    v: 2\n                }]\n            }, {\n                c: [{\n                        v: \"March\"\n                    }, {\n                        v: 24\n                    }, {\n                        v: 5\n                    }, {\n                        v: 11\n                    }, {\n                        v: 6\n                    }\n\n                ]\n            }]\n        };\n\n        chart1.options = {\n            \"title\": \"Sales per month\",\n            \"isStacked\": \"true\",\n            \"fill\": 20,\n            \"displayExactValues\": true,\n            \"vAxis\": {\n                \"title\": \"Sales unit\",\n                \"gridlines\": {\n                    \"count\": 10\n                }\n            },\n            \"hAxis\": {\n                \"title\": \"Date\"\n            }\n        };\n\n\n        var formatCollection = [{\n            name: \"color\",\n            format: [{\n                columnNum: 4,\n                formats: [{\n                    from: 0,\n                    to: 3,\n                    color: \"white\",\n                    bgcolor: \"red\"\n                }, {\n                    from: 3,\n                    to: 5,\n                    color: \"white\",\n                    fromBgColor: \"red\",\n                    toBgColor: \"blue\"\n                }, {\n                    from: 6,\n                    to: null,\n                    color: \"black\",\n                    bgcolor: \"#33ff33\"\n                }]\n            }]\n        }, {\n            name: \"arrow\",\n            checked: false,\n            format: [{\n                columnNum: 1,\n                base: 19\n            }]\n        }, {\n            name: \"date\",\n            format: [{\n                columnNum: 5,\n                formatType: 'long'\n            }]\n        }, {\n            name: \"number\",\n            format: [{\n                columnNum: 4,\n                prefix: '$'\n            }]\n        }, {\n            name: \"bar\",\n            format: [{\n                columnNum: 1,\n                width: 100\n            }]\n        }];\n\n        chart1.formatters = {};\n\n        $scope.chart = chart1;\n        $scope.cssStyle = \"height:600px; width:100%;\";\n\n        $scope.chartSelectionChange = function() {\n\n            if (($scope.chart.type === 'Table' && $scope.chart.data.cols.length === 6 && $scope.chart.options.tooltip.isHtml === true) ||\n                ($scope.chart.type !== 'Table' && $scope.chart.data.cols.length === 6 && $scope.chart.options.tooltip.isHtml === false)) {\n                $scope.chart.data.cols.pop();\n                delete $scope.chart.data.rows[0].c[5];\n                delete $scope.chart.data.rows[1].c[5];\n                delete $scope.chart.data.rows[2].c[5];\n            }\n\n\n            if ($scope.chart.type === 'Table') {\n\n                $scope.chart.options.tooltip.isHtml = false;\n\n                $scope.chart.data.cols.push({\n                    id: \"data-id\",\n                    label: \"Date\",\n                    type: \"date\"\n                });\n                $scope.chart.data.rows[0].c[5] = {\n                    v: \"Date(2013,01,05)\"\n                };\n                $scope.chart.data.rows[1].c[5] = {\n                    v: \"Date(2013,02,05)\"\n                };\n                $scope.chart.data.rows[2].c[5] = {\n                    v: \"Date(2013,03,05)\"\n                };\n            }\n        };\n\n\n        $scope.htmlTooltip = function() {\n\n            if ($scope.chart.options.tooltip.isHtml) {\n                $scope.chart.data.cols.push({\n                    id: \"\",\n                    \"role\": \"tooltip\",\n                    \"type\": \"string\",\n                    \"p\": {\n                        \"role\": \"tooltip\",\n                        'html': true\n                    }\n                });\n                $scope.chart.data.rows[0].c[5] = {\n                    v: \" <b>Shipping \" + $scope.chart.data.rows[0].c[4].v + \"</b><br /><img src=\\\"http://icons.iconarchive.com/icons/antrepo/container-4-cargo-vans/512/Google-Shipping-Box-icon.png\\\" style=\\\"height:85px\\\" />\"\n                };\n                $scope.chart.data.rows[1].c[5] = {\n                    v: \" <b>Shipping \" + $scope.chart.data.rows[1].c[4].v + \"</b><br /><img src=\\\"http://icons.iconarchive.com/icons/antrepo/container-4-cargo-vans/512/Google-Shipping-Box-icon.png\\\" style=\\\"height:85px\\\" />\"\n                };\n                $scope.chart.data.rows[2].c[5] = {\n                    v: \" <b>Shipping \" + $scope.chart.data.rows[2].c[4].v + \"</b><br /><img src=\\\"http://icons.iconarchive.com/icons/antrepo/container-4-cargo-vans/512/Google-Shipping-Box-icon.png\\\" style=\\\"height:85px\\\" />\"\n                };\n            }\n            else {\n                $scope.chart.data.cols.pop();\n                delete $scope.chart.data.rows[0].c[5];\n                delete $scope.chart.data.rows[1].c[5];\n                delete $scope.chart.data.rows[2].c[5];\n            }\n        };\n\n\n        $scope.hideServer = false;\n        $scope.selectionChange = function() {\n            if ($scope.hideServer) {\n                $scope.chart.view = {\n                    columns: [0, 1, 2, 4]\n                };\n            }\n            else {\n                $scope.chart.view = {};\n            }\n        };\n\n        $scope.formatCollection = formatCollection;\n        $scope.toggleFormat = function(format) {\n            $scope.chart.formatters[format.name] = format.format;\n        };\n\n        $scope.chartReady = function() {\n            fixGoogleChartsBarsBootstrap();\n        };\n\n        function fixGoogleChartsBarsBootstrap() {\n            // Google charts uses <img height=\"12px\">, which is incompatible with Twitter\n            // * bootstrap in responsive mode, which inserts a css rule for: img { height: auto; }.\n            // *\n            // * The fix is to use inline style width attributes, ie <img style=\"height: 12px;\">.\n            // * BUT we can't change the way Google Charts renders its bars. Nor can we change\n            // * the Twitter bootstrap CSS and remain future proof.\n            // *\n            // * Instead, this function can be called after a Google charts render to \"fix\" the\n            // * issue by setting the style attributes dynamically.\n\n            $(\".google-visualization-table-table img[width]\").each(function(index, img) {\n                $(img).css(\"width\", $(img).attr(\"width\")).css(\"height\", $(img).attr(\"height\"));\n            });\n        }\n\n    });\n})();\n","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/partials/gauge.js":"/* global angular */\n(function() {\n  'use strict';\n  angular.module('google-chart-sample').controller(\"GaugeChartCtrl\", function($scope) {\n\n    $scope.chartObject = {};\n    $scope.chartObject.type = \"Gauge\";\n\n    $scope.chartObject.options = {\n      width: 400,\n      height: 120,\n      redFrom: 90,\n      redTo: 100,\n      yellowFrom: 75,\n      yellowTo: 90,\n      minorTicks: 5\n    };\n\n    $scope.chartObject.data = [\n      ['Label', 'Value'],\n      ['Memory', 80],\n      ['CPU', 55],\n      ['Network', 68]\n    ];\n  });\n})();","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/partials/generic.js":"/* global angular */\nangular.module(\"google-chart-sample\").controller(\"GenericChartCtrl\", function ($scope, $routeParams) {\n    $scope.chartObject = {};\n\n    $scope.onions = [\n        {v: \"Onions\"},\n        {v: 3},\n    ];\n\n    $scope.chartObject.data = {\"cols\": [\n        {id: \"t\", label: \"Topping\", type: \"string\"},\n        {id: \"s\", label: \"Slices\", type: \"number\"}\n    ], \"rows\": [\n        {c: [\n            {v: \"Mushrooms\"},\n            {v: 3},\n        ]},\n        {c: $scope.onions},\n        {c: [\n            {v: \"Olives\"},\n            {v: 31}\n        ]},\n        {c: [\n            {v: \"Zucchini\"},\n            {v: 1},\n        ]},\n        {c: [\n            {v: \"Pepperoni\"},\n            {v: 2},\n        ]}\n    ]};\n\n\n    // $routeParams.chartType == BarChart or PieChart or ColumnChart...\n    $scope.chartObject.type = $routeParams.chartType;\n    $scope.chartObject.options = {\n        'title': 'How Much Pizza I Ate Last Night'\n    };\n});\n\n","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/src/agcBeforeDraw.js":"/* global angular */\n(function(){\n    angular.module('googlechart')\n        .directive('agcBeforeDraw', onReadyDirective);\n        \n    function onReadyDirective(){\n        return {\n            restrict: 'A',\n            scope: false,\n            require: 'googleChart',\n            link: function(scope, element, attrs, googleChartController){\n                callback.$inject=['chartWrapper'];\n                function callback(chartWrapper){\n                    scope.$apply(function (){\n                        scope.$eval(attrs.agcBeforeDraw, {chartWrapper: chartWrapper});\n                    });\n                }\n                googleChartController.registerServiceListener('beforeDraw', callback, this);\n            }\n        };\n    }\n})();","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/src/agcOnClick.js":"(function(){\n    angular.module('googlechart')\n        .directive('agcOnClick', onClickDirective);\n\n    function onClickDirective(){\n        return {\n            restrict: 'A',\n            scope: false,\n            require: 'googleChart',\n            link: function(scope, element, attrs, googleChartController){\n                callback.$inject = ['args', 'chart', 'chartWrapper'];\n                function callback(args, chart, chartWrapper){\n                    scope.$apply(function (){\n                        scope.$eval(attrs.agcOnClick, {args: args, chart: chart, chartWrapper: chartWrapper});\n                    });\n                }\n                googleChartController.registerChartListener('click', callback, this);\n            }\n        };\n    }\n})();\n","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/src/agcOnError.js":"/* global angular */\n(function(){\n    angular.module('googlechart')\n        .directive('agcOnError', onErrorDirective);\n    function onErrorDirective(){\n        return{\n            restrict: 'A',\n            scope: false,\n            require: 'googleChart',\n            link: function(scope, element, attrs, googleChartController){\n                callback.$inject = ['chartWrapper', 'chart', 'args'];\n                function callback(chartWrapper, chart, args){\n                    var returnValues = {\n                        chartWrapper: chartWrapper,\n                        chart: chart,\n                        args: args,\n                        error: args[0],\n                        err: args[0],\n                        id: args[0].id,\n                        message: args[0].message\n                    };\n                    scope.$apply(function(){\n                        scope.$eval(attrs.agcOnError, returnValues);\n                    });\n                }\n                googleChartController.registerWrapperListener('error', callback, this);\n            }\n        };\n    }\n})();","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/src/agcOnMouseout.js":"/* global angular */\n\n(function(){\n    angular.module('googlechart')\n        .directive('agcOnMouseout', agcOnMouseoutDirective);\n    \n    function agcOnMouseoutDirective(){\n        return {\n            restrict: 'A',\n            scope: false,\n            require: 'googleChart',\n            link: function(scope, element, attrs, googleChartController){\n                callback.$inject = ['args', 'chart', 'chartWrapper'];\n                function callback(args, chart, chartWrapper){\n                    var returnParams = {\n                        chartWrapper: chartWrapper,\n                        chart: chart,\n                        args: args,\n                        column: args[0].column,\n                        row: args[0].row\n                    };\n                    scope.$apply(function () {\n                        scope.$eval(attrs.agcOnMouseout, returnParams);\n                    });\n                }\n                googleChartController.registerChartListener('onmouseout', callback, this);\n            }\n        };\n    }\n})();","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/src/agcOnMouseover.js":"/* global angular */\n\n(function(){\n    angular.module('googlechart')\n        .directive('agcOnMouseover', agcOnMouseoverDirective);\n    \n    function agcOnMouseoverDirective(){\n        return {\n            restrict: 'A',\n            scope: false,\n            require: 'googleChart',\n            link: function(scope, element, attrs, googleChartController){\n                callback.$inject = ['args', 'chart', 'chartWrapper'];\n                function callback(args, chart, chartWrapper){\n                    var returnParams = {\n                        chartWrapper: chartWrapper,\n                        chart: chart,\n                        args: args,\n                        column: args[0].column,\n                        row: args[0].row\n                    };\n                    scope.$apply(function () {\n                        scope.$eval(attrs.agcOnMouseover, returnParams);\n                    });\n                }\n                googleChartController.registerChartListener('onmouseover', callback, this);\n            }\n        };\n    }\n})();","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/src/agcOnReady.js":"/* global angular */\n(function(){\n    angular.module('googlechart')\n        .directive('agcOnReady', onReadyDirective);\n        \n    function onReadyDirective(){\n        return {\n            restrict: 'A',\n            scope: false,\n            require: 'googleChart',\n            link: function(scope, element, attrs, googleChartController){\n                callback.$inject=['chartWrapper'];\n                function callback(chartWrapper){\n                    scope.$apply(function (){\n                        scope.$eval(attrs.agcOnReady, {chartWrapper: chartWrapper});\n                    });\n                }\n                googleChartController.registerWrapperListener('ready', callback, this);\n            }\n        };\n    }\n})();","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/src/agcOnSelect.js":"/* global angular */\n(function(){\n    angular.module('googlechart')\n        .directive('agcOnSelect', onSelectDirective);\n        \n    function onSelectDirective(){\n        return {\n            restrict: 'A',\n            scope: false,\n            require: 'googleChart',\n            link: function(scope, element, attrs, googleChartController){\n                callback.$inject = ['chartWrapper', 'chart'];\n                function callback(chartWrapper, chart){\n                    var selectEventRetParams = { selectedItems: chart.getSelection() };\n                    // This is for backwards compatibility for people using 'selectedItem' that only wanted the first selection.\n                    selectEventRetParams.selectedItem = selectEventRetParams.selectedItems[0];\n                    selectEventRetParams.chartWrapper = chartWrapper;\n                    selectEventRetParams.chart = chart;\n                    scope.$apply(function () {\n                        scope.$eval(attrs.agcOnSelect, selectEventRetParams);\n                    });\n                }\n                googleChartController.registerWrapperListener('select', callback, this);\n            }\n        };\n    }\n})();","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/src/FormatManager.js":"/* global angular, google */\n(function(){\n    angular.module('googlechart')\n        .factory('FormatManager', formatManagerFactory);\n        \n        function formatManagerFactory(){\n            // Handles the processing of Google Charts API Formats\n            function FormatManager($google){\n                var self = this;\n                var oldFormatTemplates = {};\n                self.iFormats = {}; // Holds instances of formats (ie. self.iFormats.date[0] = new $google.visualization.DateFormat(params))\n                self.applyFormats = applyFormats;\n                \n                // apply formats of type to datatable\n                function apply(tFormats, dataTable){\n                    var i, formatType;\n                    for (formatType in tFormats){\n                        if (tFormats.hasOwnProperty(formatType)){\n                            for (i = 0; i < self.iFormats[formatType].length; i++) {\n                                if (tFormats[formatType][i].columnNum < dataTable.getNumberOfColumns()) {\n                                    self.iFormats[formatType][i].format(dataTable, tFormats[formatType][i].columnNum);\n                                }\n                            }\n                        }\n                    }\n                }\n                \n                function applyFormat(formatType, FormatClass, tFormats){\n                    var i;\n                    if (angular.isArray(tFormats[formatType])) {\n                        // basic change detection; no need to run if no changes\n                        if (!angular.equals(tFormats[formatType], oldFormatTemplates[formatType])) {\n                            oldFormatTemplates[formatType] = tFormats[formatType];\n                            self.iFormats[formatType] = [];\n            \n                            if (formatType === 'color') {\n                                instantiateColorFormatters(tFormats);\n                            } else {\n                                for (i = 0; i < tFormats[formatType].length; i++) {\n                                    self.iFormats[formatType].push(new FormatClass(\n                                        tFormats[formatType][i])\n                                    );\n                                }\n                            }\n                        }\n                    }\n                }\n                \n                function applyFormats(dataTable, tFormats, customFormatters) {\n                    var formatType, FormatClass, requiresHtml = false;\n                    if (!angular.isDefined(tFormats) || !angular.isDefined(dataTable)){\n                        return { requiresHtml: false };\n                    }\n                    for (formatType in tFormats){\n                        if (tFormats.hasOwnProperty(formatType)){\n                            FormatClass = getFormatClass(formatType, customFormatters);\n                            if (!angular.isFunction(FormatClass)){\n                                // if no class constructor was returned,\n                                // there's no point in completing cycle\n                                continue;\n                            }\n                            applyFormat(formatType, FormatClass, tFormats);\n                            \n                            //Many formatters require HTML tags to display special formatting\n                            if (formatType === 'arrow' || formatType === 'bar' || formatType === 'color') {\n                                requiresHtml = true;\n                            }\n                        }\n                    }\n                    apply(tFormats, dataTable);\n                    return { requiresHtml: requiresHtml };\n                }\n                \n                function instantiateColorFormatters(tFormats){\n                    var t, colorFormat, i, data, formatType = 'color';\n                    for (t = 0; t < tFormats[formatType].length; t++) {\n                        colorFormat = new $google.visualization.ColorFormat();\n\n                        for (i = 0; i < tFormats[formatType][t].formats.length; i++) {\n                            data = tFormats[formatType][t].formats[i];\n\n                            if (typeof (data.fromBgColor) !== 'undefined' && typeof (data.toBgColor) !== 'undefined') {\n                                colorFormat.addGradientRange(data.from, data.to, data.color, data.fromBgColor, data.toBgColor);\n                            } else {\n                                colorFormat.addRange(data.from, data.to, data.color, data.bgcolor);\n                            }\n                        }\n\n                        self.iFormats[formatType].push(colorFormat);\n                    }\n                }\n                \n                function getFormatClass(formatType, customFormatters){\n                    var className = formatType.charAt(0).toUpperCase() + formatType.slice(1).toLowerCase() + \"Format\";\n                    if ($google.visualization.hasOwnProperty(className)){\n                        return google.visualization[className];\n                    } else if (angular.isDefined(customFormatters) && customFormatters.hasOwnProperty(formatType)) {\n                        return customFormatters[formatType];\n                    }\n                    return;\n                }\n            }\n            \n            return FormatManager;\n        }\n})();","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/src/googleChartApiConfig.js":"/* global angular */\n(function(){\n    angular.module('googlechart')\n        .value('googleChartApiConfig', {\n            version: '1',\n            optionalSettings: {\n                packages: ['corechart']\n            }\n        });\n})();","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/src/googleChartApiPromise.js":"/* global angular */\n(function(){\n    angular.module('googlechart')\n        .factory('googleChartApiPromise', googleChartApiPromiseFactory);\n        \n    googleChartApiPromiseFactory.$inject = ['$rootScope', '$q', 'googleChartApiConfig', 'googleJsapiUrl'];\n        \n    function googleChartApiPromiseFactory($rootScope, $q, apiConfig, googleJsapiUrl) {\n        apiConfig.optionalSettings = apiConfig.optionalSettings || {};\n        var apiReady = $q.defer();\n        var onLoad = function () {\n            // override callback function\n            var settings = {\n                callback: function () {\n                    var oldCb = apiConfig.optionalSettings.callback;\n                    $rootScope.$apply(function () {\n                        apiReady.resolve(google);\n                    });\n\n                    if (angular.isFunction(oldCb)) {\n                        oldCb.call(this);\n                    }\n                }\n            };\n\n            settings = angular.extend({}, apiConfig.optionalSettings, settings);\n\n            window.google.load('visualization', apiConfig.version, settings);\n        };\n        var head = document.getElementsByTagName('head')[0];\n        var script = document.createElement('script');\n\n        script.setAttribute('type', 'text/javascript');\n        script.src = googleJsapiUrl;\n\n        if (script.addEventListener) { // Standard browsers (including IE9+)\n            script.addEventListener('load', onLoad, false);\n        } else { // IE8 and below\n            script.onreadystatechange = function () {\n                if (script.readyState === 'loaded' || script.readyState === 'complete') {\n                    script.onreadystatechange = null;\n                    onLoad();\n                }\n            };\n        }\n        head.appendChild(script);\n\n        return apiReady.promise;\n    }\n})();","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/src/GoogleChartController.js":"/* global angular, google */\n\n(function() {\n\n    angular.module('googlechart')\n        .controller('GoogleChartController', GoogleChartController);\n\n    GoogleChartController.$inject = ['$scope', '$element', '$attrs', '$injector', '$timeout', '$window', '$rootScope', 'GoogleChartService'];\n\n    function GoogleChartController($scope, $element, $attrs, $injector, $timeout, $window, $rootScope, GoogleChartService) {\n        var self = this;\n        var resizeHandler;\n        var googleChartService;\n\n        init();\n\n        function cleanup() {\n            resizeHandler();\n        }\n\n        function draw() {\n            if (!draw.triggered && (self.chart !== undefined)) {\n                draw.triggered = true;\n                $timeout(setupAndDraw, 0, true);\n            }\n            else if (self.chart !== undefined) {\n                $timeout.cancel(draw.recallTimeout);\n                draw.recallTimeout = $timeout(draw, 10);\n            }\n        }\n\n        // Watch function calls this.\n        function drawAsync() {\n            googleChartService.getReadyPromise()\n                .then(draw);\n        }\n\n        //setupAndDraw() calls this.\n        function drawChartWrapper() {\n            googleChartService.draw();\n            draw.triggered = false;\n        }\n\n        function init() {\n            // Instantiate service\n            googleChartService = new GoogleChartService();\n            \n            self.registerChartListener = googleChartService.registerChartListener;\n            self.registerWrapperListener = googleChartService.registerWrapperListener;\n            self.registerServiceListener = googleChartService.registerServiceListener;\n            \n            /* Watches, to refresh the chart when its data, formatters, options, view,\n            or type change. All other values intentionally disregarded to avoid double\n            calls to the draw function. Please avoid making changes to these objects\n            directly from this directive.*/\n            $scope.$watch(watchValue, watchHandler, true); // true is for deep object equality checking\n\n            // Redraw the chart if the window is resized\n            resizeHandler = $rootScope.$on('resizeMsg', drawAsync);\n\n            //Cleanup resize handler.\n            $scope.$on('$destroy', cleanup);\n        }\n\n        function setupAndDraw() {\n            googleChartService.setup($element,\n            self.chart.type,\n            self.chart.data,\n            self.chart.view,\n            self.chart.options,\n            self.chart.formatters,\n            self.chart.customFormatters);\n\n            $timeout(drawChartWrapper);\n        }\n\n        function watchHandler() {\n            self.chart = $scope.$eval($attrs.chart);\n            drawAsync();\n        }\n\n        function watchValue() {\n            var chartObject = $scope.$eval($attrs.chart);\n            if (angular.isDefined(chartObject) && angular.isObject(chartObject)) {\n                return {\n                    customFormatters: chartObject.customFormatters,\n                    data: chartObject.data,\n                    formatters: chartObject.formatters,\n                    options: chartObject.options,\n                    type: chartObject.type,\n                    view: chartObject.view\n                };\n            }\n        }\n    }\n})();","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/src/googleChart.js":"/* global angular, google */\n/* jshint -W072 */\n(function(){\n    angular.module('googlechart')\n        .directive('googleChart', googleChartDirective);\n        \n    googleChartDirective.$inject = [];\n        \n    function googleChartDirective() {\n\n        return {\n            restrict: 'A',\n            scope: false,\n            controller: 'GoogleChartController'\n        };\n    }\n})();\n","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/src/googlechart.module.js":"/* global angular */\n(function(){\n    angular.module('googlechart', [])\n        .run(registerResizeEvent);\n        \n    registerResizeEvent.$inject = ['$rootScope', '$window'];\n    \n    function registerResizeEvent($rootScope, $window){\n        angular.element($window).bind('resize', function () {\n                $rootScope.$emit('resizeMsg');\n            });\n    }\n})();","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/src/googleChartService.js":"/* global angular */\n(function() {\n    angular.module('googlechart')\n        .factory('GoogleChartService', GoogleChartServiceFactory);\n\n    GoogleChartServiceFactory.$inject = ['googleChartApiPromise', '$injector', '$q', 'FormatManager'];\n\n    function GoogleChartServiceFactory(googleChartApiPromise, $injector, $q, FormatManager) {\n        function GoogleChartService() {\n            var self = this;\n            self.draw = draw;\n            self.getChartWrapper = getChartWrapper;\n            self.getData = getData;\n            self.getElement = getElement;\n            self.getOption = getOption;\n            self.getOptions = getOptions;\n            self.getView = getView;\n            self.getReadyPromise = getReadyPromise;\n            self.isApiReady = isApiReady;\n            self.registerChartListener = registerChartListener;\n            self.registerServiceListener = registerServiceListener;\n            self.registerWrapperListener = registerWrapperListener;\n            self.setData = setData;\n            self.setElement = setElement;\n            self.setOption = setOption;\n            self.setOptions = setOptions;\n            self.setup = setup;\n            self.setView = setView;\n\n            var $google,\n                _apiPromise,\n                _apiReady,\n                _chartWrapper,\n                _element,\n                _chartType,\n                _data,\n                _view,\n                _options,\n                _formatters,\n                _innerVisualization,\n                _formatManager,\n                _needsUpdate = true,\n                _customFormatters,\n                _serviceDeferred,\n                serviceListeners = {},\n                wrapperListeners = {},\n                chartListeners = {};\n\n            _init();\n\n            function _activateServiceEvent(eventName) {\n                var i;\n                if (angular.isArray(serviceListeners[eventName])) {\n                    for (i = 0; i < serviceListeners[eventName].length; i++) {\n                        serviceListeners[eventName][i]();\n                    }\n                }\n            }\n\n            function _apiLoadFail(reason) {\n                // Not sure what to do if this does happen.\n                // Post your suggestions in the issues tracker at\n                // https://github.com/angular-google-chart/angular-google-chart/\n                return reason;\n            }\n\n            function _apiLoadSuccess(g) {\n                $google = g;\n                _apiReady = true;\n                _serviceDeferred.resolve();\n                return g;\n            }\n\n\n            function _continueSetup() {\n                if (!angular.isDefined(_chartWrapper)) {\n                    _chartWrapper = new $google.visualization.ChartWrapper({\n                        chartType: _chartType,\n                        dataTable: _data,\n                        view: _view,\n                        options: _options,\n                        containerId: _element[0]\n                    });\n                    _registerListenersWithGoogle(_chartWrapper, wrapperListeners);\n                }\n                else {\n                    _chartWrapper.setChartType(_chartType);\n                    _chartWrapper.setDataTable(_data);\n                    _chartWrapper.setView(_view);\n                    _chartWrapper.setOptions(_options);\n                }\n\n                if (!_formatManager) {\n                    _formatManager = new FormatManager($google);\n                }\n\n                if (_formatManager.applyFormats(_chartWrapper.getDataTable(),\n                        _formatters, _customFormatters).requiresHtml) {\n                    _chartWrapper.setOption('allowHtml', true);\n                }\n\n                _needsUpdate = false;\n            }\n\n            // Credit for this solution:\n            // http://stackoverflow.com/a/20125572/3771976\n            function _getSetDescendantProp(obj, desc, value) {\n                var arr = desc ? desc.split(\".\") : [];\n\n                while (arr.length && obj) {\n                    var comp = arr.shift();\n                    var match = new RegExp(\"(.+)\\\\[([0-9]*)\\\\]\").exec(comp);\n\n                    if (value) {\n                        if (obj[comp] === undefined) {\n                            obj[comp] = {};\n                        }\n\n                        if (arr.length === 0) {\n                            obj[comp] = value;\n                        }\n                    }\n\n                    obj = obj[comp];\n                }\n\n                return obj;\n            }\n\n            function _handleReady() {\n                // When the chartWrapper is ready, check to see if the inner chart\n                // has changed. If it has, re-register listeners onto that chart.\n                if (_innerVisualization !== _chartWrapper.getChart()) {\n                    _innerVisualization = _chartWrapper.getChart();\n                    _registerListenersWithGoogle(_innerVisualization, chartListeners);\n                }\n            }\n\n            function _init() {\n                _apiReady = false;\n                _serviceDeferred = $q.defer();\n                //keeps the resulting promise to chain on other actions\n                _apiPromise = googleChartApiPromise\n                    .then(_apiLoadSuccess)\n                    .catch(_apiLoadFail);\n\n                registerWrapperListener('ready', _handleReady, self);\n            }\n\n            function _registerListener(listenerCollection, eventName, listenerFn, listenerObject) {\n                // This is the function that will be invoked by the charts API.\n                // Passing the wrapper function allows the use of DI for\n                // for the called function.\n                var listenerWrapper = function() {\n                    var locals = {\n                        chartWrapper: _chartWrapper,\n                        chart: _chartWrapper.getChart(),\n                        args: arguments\n                    };\n                    $injector.invoke(listenerFn, listenerObject || this, locals);\n                };\n\n                if (angular.isDefined(listenerCollection) && angular.isObject(listenerCollection)) {\n                    if (!angular.isArray(listenerCollection[eventName])) {\n                        listenerCollection[eventName] = [];\n                    }\n                    listenerCollection[eventName].push(listenerWrapper);\n                    return function() {\n                        if (angular.isDefined(listenerWrapper.googleListenerHandle)) {\n                            $google.visualization.events.removeListener(listenerWrapper.googleListenerHandle);\n                        }\n                        var fnIndex = listenerCollection[eventName].indexOf(listenerWrapper);\n                        listenerCollection[eventName].splice(fnIndex, 1);\n                        if (listenerCollection[eventName].length === 0) {\n                            listenerCollection[eventName] = undefined;\n                        }\n                    };\n                }\n            }\n\n            function _registerListenersWithGoogle(eventSource, listenerCollection) {\n                for (var eventName in listenerCollection) {\n                    if (listenerCollection.hasOwnProperty(eventName) && angular.isArray(listenerCollection[eventName])) {\n                        for (var fnIterator = 0; fnIterator < listenerCollection[eventName].length; fnIterator++) {\n                            if (angular.isFunction(listenerCollection[eventName][fnIterator])) {\n                                listenerCollection[eventName][fnIterator].googleListenerHandle =\n                                    $google.visualization.events.addListener(eventSource, eventName, listenerCollection[eventName][fnIterator]);\n                            }\n                        }\n                    }\n                }\n            }\n\n            function _runDrawCycle() {\n                _activateServiceEvent('beforeDraw');\n                _chartWrapper.draw();\n            }\n\n            /*\n            This function does this:\n                - waits for API to load, if not already loaded\n                - sets up ChartWrapper object (create or update)\n                - schedules timeout event to draw chart\n            */\n            function draw() {\n                if (_needsUpdate) {\n                    _apiPromise = _apiPromise.then(_continueSetup);\n                }\n                _apiPromise = _apiPromise.then(_runDrawCycle());\n            }\n\n            function getChartWrapper() {\n                // Most get functions on this interface return copies,\n                // this one should return reference so as to expose the \n                //chart api to users\n                return _chartWrapper;\n            }\n\n            function getData() {\n                var data = _data || {};\n                return angular.copy(data);\n            }\n\n            function getElement() {\n                return _element;\n            }\n\n            function getOption(name) {\n                var options = _options || {};\n                return _getSetDescendantProp(options, name);\n            }\n\n            function getOptions() {\n                var options = _options || {};\n                return angular.copy(options);\n            }\n\n            function getReadyPromise() {\n                return _serviceDeferred.promise;\n            }\n\n            function getView() {\n                var view = _view || {};\n                return angular.copy(view);\n            }\n\n            function isApiReady() {\n                return _apiReady;\n            }\n\n            function registerChartListener(eventName, listenerFn, listenerObject) {\n                return _registerListener(chartListeners, eventName, listenerFn, listenerObject);\n            }\n\n            function registerServiceListener(eventName, listenerFn, listenerObject) {\n                return _registerListener(serviceListeners, eventName, listenerFn, listenerObject);\n            }\n\n            function registerWrapperListener(eventName, listenerFn, listenerObject) {\n                return _registerListener(wrapperListeners, eventName, listenerFn, listenerObject);\n            }\n\n            function setData(data) {\n                if (angular.isDefined(data)) {\n                    _data = angular.copy(data);\n                    _needsUpdate = true;\n                }\n            }\n\n            function setElement(element) {\n                if (angular.isElement(element) && _element !== element) {\n                    _element = element;\n                    // clear out the chartWrapper because we're going to need a new one\n                    _chartWrapper = null;\n                    _needsUpdate = true;\n                }\n            }\n\n            function setOption(name, value) {\n                _options = _options || {};\n                _getSetDescendantProp(_options, name, angular.copy(value));\n                _needsUpdate = true;\n            }\n\n            function setOptions(options) {\n                if (angular.isDefined(options)) {\n                    _options = angular.copy(options);\n                    _needsUpdate = true;\n                }\n            }\n\n            function setup(element, chartType, data, view, options, formatters, customFormatters) {\n                // Keep values if already set,\n                // can call setup() with nulls to keep\n                // existing values\n                _element = element || _element;\n                _chartType = chartType || _chartType;\n                _data = data || _data;\n                _view = view || _view;\n                _options = options || _options;\n                _formatters = formatters || _formatters;\n                _customFormatters = customFormatters || _customFormatters;\n\n                _apiPromise = _apiPromise.then(_continueSetup);\n            }\n\n            function setView(view) {\n                _view = angular.copy(view);\n            }\n        }\n        return GoogleChartService;\n    }\n})();","/home/travis/build/npmtest/node-npmtest-angular-google-chart/node_modules/angular-google-chart/src/googleJsapiUrl.js":"/* global angular */\n(function(){\n    angular.module('googlechart')\n        .provider('googleJsapiUrl', googleJsapiUrlProvider);\n        \n    function googleJsapiUrlProvider() {\n        var protocol = 'https:';\n        var url = '//www.google.com/jsapi';\n        \n        this.setProtocol = function (newProtocol) {\n            protocol = newProtocol;\n        };\n\n        this.setUrl = function (newUrl) {\n            url = newUrl;\n        };\n\n        this.$get = function () {\n            return (protocol ? protocol : '') + url;\n        };\n    }\n})();"}